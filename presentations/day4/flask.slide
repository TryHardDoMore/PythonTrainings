Flask
Sep 2019

* What's Flask

Flask is a micro web framework written in Python.
It is classified as a microframework because it does not require particular tools or libraries.
It has no database abstraction layer, form validation, or any other components where pre-existing third-party libraries provide common functions.
However, Flask supports extensions that can add application features as if they were implemented in Flask itself.
Extensions exist for object-relational mappers, form validation, upload handling, various open authentication technologies and several common framework related tools.
Extensions are updated far more frequently than the core Flask program.
(c) Wiki

* Basic app example

  from flask import Flask
  app = Flask(__name__)

  @app.route('/')
  def hello_world():
      return 'Hello World!'

  if __name__ == '__main__':
      app.run()

  # Same but available from another hosts and with debug
      app.run(host='0.0.0.0',debug=True)

* Flask routers:

Routes: A.k.a REST paths

  #Desclaring routes is pretty easy
  @app.route('/')
  def index():
    return 'Index Page'
  
  @app.route('/hello')
  def hello():
    return 'Hello World'

  #If params is needed
  @app.route('/user/<username>')
  #If params is type limited
  @app.route('/user/<int:user_id>')
  #Limiting by method 
  @app.route('/user/<int:user_id>', methods=['GET', 'POST'])

* Errors and redirects:

  from flask import abort, redirect, url_for

  @app.route('/')
  def index():
      return redirect(url_for('login'))

  @app.route('/login')
  def login():
      abort(401)

  @app.errorhandler(401)
  def page_not_found(error):
    return render_template('access_denied.html'), 404

* Request:
  
  @app.route('/login', methods=['POST', 'GET'])
  def login():
    error = None
    if request.method == 'POST':
        if valid_login(request.form['username'],
                       request.form['password']):
            return log_the_user_in(request.form['username'])
        else:
            error = 'Invalid username/password'
    return render_template('login.html', error=error)

* Sessions 

  from flask import Flask, session, redirect, url_for, escape, request

  app = Flask(__name__)

  @app.route('/')
  def index():
      if 'username' in session:
          return 'Logged in as %s' % escape(session['username'])
      return 'You are not logged in'

  @app.route('/login', methods=['GET', 'POST'])
  def login():
      if request.method == 'POST':
          session['username'] = request.form['username']
          return redirect(url_for('index'))
      return '''
          <form action="" method="post">
              <p><input type=text name=username>
              <p><input type=submit value=Login>
          </form>
      '''

* Session 2

  @app.route('/logout')
  def logout():
      session.pop('username', None)
      return redirect(url_for('index'))

  # set the secret key.  keep this really secret:
  app.secret_key = 'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'


* Existing Flask app problems

 Let's discuss it)

 * Problems that I found (still probably not all as well)

 - Direct SQL queries;
 - Unsecure direct sql queries;
 - No authorization reqiered;
 - No sessions so far;
 - Application runs until first error;
 - Application is able to serve only one request at a time;
 - Rollouts are kinda not obvious;
 - Secrets directly in config (and in CSV as well?)



